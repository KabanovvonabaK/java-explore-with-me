{
	"info": {
		"_postman_id": "9314c9d7-51b6-4af4-8e18-98975f272fb0",
		"name": "Test comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26683196"
	},
	"item": [
		{
			"name": "Создание пользователя №1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"userId\", jsonData.id);\r",
							"pm.environment.set(\"emailUser\", jsonData.email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание пользователя №2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"userId2\", jsonData.id);\r",
							"pm.environment.set(\"emailUser2\", jsonData.email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"catId\", jsonData.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomWords}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание события №1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.to.have.status(201)) {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"eventId\", jsonData.id);\r",
							"    }\r",
							"\r",
							"\r",
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('annotation');\r",
							"    pm.expect(target).to.have.property('category');\r",
							"    pm.expect(target).to.have.property(\"confirmedRequests\");\r",
							"    pm.expect(target).to.have.property('description');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\":\"{{$randomPhrase}}\",\r\n    \"category\":{{catId}},\r\n    \"description\":\"Description with random number - {{$randomInt}}\",\r\n    \"eventDate\":\"2024-03-03 10:00:00\",\r\n    \"title\":\"Event title\",\r\n    \"location\":{\r\n        \"lat\":25.26,\r\n        \"lon\":24.36\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария №1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.to.have.status(201)) {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"comId\", jsonData.id);\r",
							"    }\r",
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property(\"eventId\");\r",
							"    pm.expect(target).to.have.property('userId');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Explore-User-Id",
						"value": "{{userId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"eventId\":{{eventId}},\r\n    \"text\": \"Comment - {{$randomInt}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария с пустым текстом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: error\", function () {\r",
							"    pm.expect(target).to.have.property('error');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Explore-User-Id",
						"value": "{{userId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"eventId\":{{eventId}},\r\n    \"text\": \"   \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление ранее опубликованного комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property(\"eventId\");\r",
							"    pm.expect(target).to.have.property('userId');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Обновленный комментарий должен соответствовать');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Updated text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:comId/user/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comId",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария пробелами",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: error\", function () {\r",
							"    pm.expect(target).to.have.property('error');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"   \",\r\n    \"eventId\": {{eventId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:comId/user/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comId",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должны быть найдены комментарии у заданного события\", function () {\r",
							"    pm.expect(target.length).to.gte(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"event",
						":eventId"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "2",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property(\"eventId\");\r",
							"    pm.expect(target).to.have.property('userId');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка удалить  чужой комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: error\", function () {\r",
							"    pm.expect(target).to.have.property('error');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:comId/user/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comId",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						},
						{
							"key": "userId",
							"value": "{{userId2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление своего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:comId/user/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comId",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос комментария пользователем после удаления",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ не должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.not.have.property('id');\r",
							"    pm.expect(target).to.not.have.property('text');\r",
							"    pm.expect(target).to.not.have.property('created');\r",
							"    pm.expect(target).to.not.have.property(\"eventId\");\r",
							"    pm.expect(target).to.not.have.property('userId');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария №2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property(\"eventId\");\r",
							"    pm.expect(target).to.have.property('userId');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});\r",
							"if(pm.response.to.have.status(201)) {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"comId\", jsonData.id);\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Explore-User-Id",
						"value": "{{userId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"text\": \"Текст для создания повторного комментария. {{$randomInt}}\",\r\n\"eventId\":{{eventId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос комментария пользователем после удаления администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ не должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    !pm.expect(target).to.not.have.property('id');\r",
							"    !pm.expect(target).to.not.have.property('text');\r",
							"    !pm.expect(target).to.not.have.property('created');\r",
							"    !pm.expect(target).to.not.have.property(\"eventId\");\r",
							"    !pm.expect(target).to.not.have.property('userId');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: error\", function () {\r",
							"    pm.expect(target).to.have.property('error');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}